package uk.gov.justice.digital.sonar.plugin.containercheck.rule;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.RETURNS_SMART_NULLS;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static uk.gov.justice.digital.sonar.plugin.containercheck.base.ContainerCheckConstants.RULE_KEY;

import org.junit.jupiter.api.Test;
import org.mockito.InOrder;
import org.mockito.Mockito;
import org.sonar.api.server.rule.RulesDefinition;

class KnownVulnerabilityRuleDefinitionTest {

    private final KnownVulnerabilityRuleDefinition rule = new KnownVulnerabilityRuleDefinition();

    @Test
    void define() {
        final RulesDefinition.Context context = mock(RulesDefinition.Context.class);
        final RulesDefinition.NewRepository repo = mock(RulesDefinition.NewRepository.class);
        final RulesDefinition.NewRule rule = mock(RulesDefinition.NewRule.class, RETURNS_SMART_NULLS);

        when(repo.createRule(RULE_KEY)).thenReturn(rule);
        when(context.createRepository(anyString(), anyString())).thenReturn(repo);

        this.rule.define(context);

        InOrder inOrder = Mockito.inOrder(context, repo);

        inOrder.verify(context).createRepository("TRIVY","neutral");
        inOrder.verify(repo).createRule(RULE_KEY);

        inOrder.verify(repo).done();
        inOrder.verifyNoMoreInteractions();
    }

}
